/**
 * integrating mediasoup server with a node.js application
 */

/* Please follow mediasoup installation requirements */
/* https://mediasoup.org/documentation/v3/mediasoup/installation/ */
import express from 'express';
import https from '@httptoolkit/httpolyglot'
import fs from 'fs';
import path from 'path';
import { Server } from 'socket.io';
import mediasoup from 'mediasoup';
import { Socket } from 'socket.io';
import { Consumer, Producer, Router, Transport, Worker } from 'mediasoup/node/lib/types';
import { WebRtcTransport } from 'mediasoup/node/lib/types';

const app = express();
const __dirname = path.resolve();

// Define interfaces for our data structures
interface PeerDetails {
  name: string;
  isAdmin: boolean;
}

interface Peer {
  socket: Socket;
  roomName: string;
  transports: string[];
  producers: string[];
  consumers: string[];
  peerDetails: PeerDetails;
}

interface Room {
  router: Router;
  peers: string[];
}

interface TransportInfo {
  socketId: string;
  transport: Transport;
  roomName: string;
  consumer: boolean;
}

interface ProducerInfo {
  socketId: string;
  producer: Producer;
  roomName: string;
}

interface ConsumerInfo {
  socketId: string;
  consumer: Consumer;
  roomName: string;
}

// Define type for rooms, peers, and other collections
let worker: Worker;
let rooms: Record<string, Room> = {};
let peers: Record<string, Peer> = {};
let transports: TransportInfo[] = [];
let producers: ProducerInfo[] = [];
let consumers: ConsumerInfo[] = [];

app.get('*', (req, res, next) => {
  const basePath = '/sfu/';

  if (req.path.indexOf(basePath) === 0 && req.path.length > basePath.length) return next();

  res.send(`You need to specify a room name in the path e.g. 'https://127.0.0.1/sfu/room'`);
});

app.use('/sfu/:room', express.static(path.join(__dirname, 'public')));

// SSL cert for HTTPS access
const options = {
  key: fs.readFileSync('./server/ssl/key.pem', 'utf-8'),
  cert: fs.readFileSync('./server/ssl/cert.pem', 'utf-8')
};

const httpsServer = https.createServer(options, app);
httpsServer.listen(3000, () => {
  console.log('listening on port: ' + 3000);
});

const io = new Server(httpsServer as any);

// socket.io namespace (could represent a room?)
const connections = io.of('/mediasoup');

/**
 * Worker
 * |-> Router(s)
 *     |-> Producer Transport(s)
 *         |-> Producer
 *     |-> Consumer Transport(s)
 *         |-> Consumer 
 **/

const createWorker = async (): Promise<Worker> => {
  const worker = await mediasoup.createWorker({
    rtcMinPort: 2000,
    rtcMaxPort: 2020,
  });
  console.log(`worker pid ${worker.pid}`);

  worker.on('died', error => {
    // This implies something serious happened, so kill the application
    console.error('mediasoup worker has died');
    setTimeout(() => process.exit(1), 2000); // exit in 2 seconds
  });

  return worker;
};

// We create a Worker as soon as our application starts
createWorker()
  .then(workerInstance => {
    worker = workerInstance;
  })
  .catch(error => {
    console.error('Failed to create worker:', error);
    process.exit(1);
  });

// This is an Array of RtpCapabilities
// https://mediasoup.org/documentation/v3/mediasoup/rtp-parameters-and-capabilities/#RtpCodecCapability
// list of media codecs supported by mediasoup ...
// https://github.com/versatica/mediasoup/blob/v3/src/supportedRtpCapabilities.ts
const mediaCodecs: mediasoup.types.RtpCodecCapability[] = [
  {
    kind: 'audio' as mediasoup.types.MediaKind,
    mimeType: 'audio/opus',
    clockRate: 48000,
    channels: 2,
  },
  {
    kind: 'video' as mediasoup.types.MediaKind,
    mimeType: 'video/VP8',
    clockRate: 90000,
    parameters: {
      'x-google-start-bitrate': 1000,
    },
  },
];

connections.on('connection', async socket => {
  console.log(socket.id);
  socket.emit('connection-success', {
    socketId: socket.id,
  });

  const removeItems = <T extends TransportInfo | ProducerInfo | ConsumerInfo>(
    items: T[],
    socketId: string,
    type: 'transport' | 'producer' | 'consumer'
  ): T[] => {
    items.forEach(item => {
      if (item.socketId === socket.id) {
        (item as any)[type].close();
      }
    });
    return items.filter(item => item.socketId !== socket.id);
  };

  socket.on('disconnect', () => {
    // do some cleanup
    console.log('peer disconnected');
    consumers = removeItems(consumers, socket.id, 'consumer');
    producers = removeItems(producers, socket.id, 'producer');
    transports = removeItems(transports, socket.id, 'transport');

    if (peers[socket.id]) {
      const { roomName } = peers[socket.id];
      delete peers[socket.id];

      // remove socket from room
      if (rooms[roomName]) {
        rooms[roomName] = {
          router: rooms[roomName].router,
          peers: rooms[roomName].peers.filter(socketId => socketId !== socket.id)
        };
      }
    }
  });

  socket.on('joinRoom', async ({ roomName }: { roomName: string }, callback: (data: { rtpCapabilities: any }) => void) => {
    // create Router if it does not exist
    const router = await createRoom(roomName, socket.id);

    peers[socket.id] = {
      socket,
      roomName,           // Name for the Router this Peer joined
      transports: [],
      producers: [],
      consumers: [],
      peerDetails: {
        name: '',
        isAdmin: false,   // Is this Peer the Admin?
      }
    };

    // get Router RTP Capabilities
    const rtpCapabilities = router.rtpCapabilities;

    // call callback from the client and send back the rtpCapabilities
    callback({ rtpCapabilities });
  });

  const createRoom = async (roomName: string, socketId: string): Promise<Router> => {
    // worker.createRouter(options)
    // options = { mediaCodecs, appData }
    // mediaCodecs -> defined above
    // appData -> custom application data - we are not supplying any
    // none of the two are required
    let router: Router;
    let roomPeers: string[] = [];
    
    if (rooms[roomName]) {
      router = rooms[roomName].router;
      roomPeers = rooms[roomName].peers || [];
    } else {
      router = await worker.createRouter({ mediaCodecs });
    }
    
    console.log(`Router ID: ${router.id}`, roomPeers.length);

    rooms[roomName] = {
      router: router,
      peers: [...roomPeers, socketId],
    };

    return router;
  };

  socket.on('createWebRtcTransport', async (
    { consumer }: { consumer: boolean }, 
    callback: (data: { params: { id: string, iceParameters: any, iceCandidates: any, dtlsParameters: any } }) => void
  ) => {
    // get Room Name from Peer's properties
    const roomName = peers[socket.id].roomName;

    // get Router (Room) object this peer is in based on RoomName
    const router = rooms[roomName].router;

    createWebRtcTransport(router).then(
      transport => {
        callback({
          params: {
            id: transport.id,
            iceParameters: transport.iceParameters,
            iceCandidates: transport.iceCandidates,
            dtlsParameters: transport.dtlsParameters,
          }
        });

        // add transport to Peer's properties
        addTransport(transport, roomName, consumer);
      },
      error => {
        console.log(error);
        callback({
          params: {
            id: '',
            iceParameters: null,
            iceCandidates: null,
            dtlsParameters: null
          }
        });
      });
  });

  const addTransport = (transport: Transport, roomName: string, consumer: boolean): void => {
    transports = [
      ...transports,
      { socketId: socket.id, transport, roomName, consumer }
    ];

    peers[socket.id] = {
      ...peers[socket.id],
      transports: [
        ...peers[socket.id].transports,
        transport.id,
      ]
    };
  };

  const addProducer = (producer: Producer, roomName: string): void => {
    producers = [
      ...producers,
      { socketId: socket.id, producer, roomName }
    ];

    peers[socket.id] = {
      ...peers[socket.id],
      producers: [
        ...peers[socket.id].producers,
        producer.id,
      ]
    };
  };

  const addConsumer = (consumer: Consumer, roomName: string): void => {
    // add the consumer to the consumers list
    consumers = [
      ...consumers,
      { socketId: socket.id, consumer, roomName }
    ];

    // add the consumer id to the peers list
    peers[socket.id] = {
      ...peers[socket.id],
      consumers: [
        ...peers[socket.id].consumers,
        consumer.id,
      ]
    };
  };

  socket.on('getProducers', (callback: (producerIds: string[]) => void) => {
    //return all producer transports
    const { roomName } = peers[socket.id];

    let producerList: string[] = [];
    producers.forEach(producerData => {
      if (producerData.socketId !== socket.id && producerData.roomName === roomName) {
        producerList = [...producerList, producerData.producer.id];
      }
    });

    // return the producer list back to the client
    callback(producerList);
  });

  const informConsumers = (roomName: string, socketId: string, id: string): void => {
    console.log(`just joined, id ${id} ${roomName}, ${socketId}`);
    // A new producer just joined
    // let all consumers to consume this producer
    producers.forEach(producerData => {
      if (producerData.socketId !== socketId && producerData.roomName === roomName) {
        const producerSocket = peers[producerData.socketId].socket;
        // use socket to send producer id to producer
        producerSocket.emit('new-producer', { producerId: id });
      }
    });
  };

  const getTransport = (socketId: string): Transport => {
    const transportData = transports.find(transport => transport.socketId === socketId && !transport.consumer);
    if (!transportData) {
      throw new Error(`Transport not found for socket ID: ${socketId}`);
    }
    return transportData.transport;
  };

  // see client's socket.emit('transport-connect', ...)
  socket.on('transport-connect', ({ dtlsParameters }: { dtlsParameters: any }) => {
    console.log('DTLS PARAMS... ', { dtlsParameters });
    
    getTransport(socket.id).connect({ dtlsParameters });
  });

  // see client's socket.emit('transport-produce', ...)
  socket.on('transport-produce', async (
    { kind, rtpParameters, appData }: { kind: string, rtpParameters: any, appData?: any }, 
    callback: (data: { id: string, producersExist: boolean }) => void
  ) => {
    // call produce based on the prameters from the client
    const producer = await getTransport(socket.id).produce({
      kind: kind as mediasoup.types.MediaKind,
      rtpParameters,
    });

    // add producer to the producers array
    const { roomName } = peers[socket.id];

    addProducer(producer, roomName);

    informConsumers(roomName, socket.id, producer.id);

    console.log('Producer ID: ', producer.id, producer.kind);

    producer.on('transportclose', () => {
      console.log('transport for this producer closed ');
      producer.close();
    });

    // Send back to the client the Producer's id
    callback({
      id: producer.id,
      producersExist: producers.length > 1
    });
  });

  // see client's socket.emit('transport-recv-connect', ...)
  socket.on('transport-recv-connect', async ({ dtlsParameters, serverConsumerTransportId }: 
    { dtlsParameters: any, serverConsumerTransportId: string }) => {
    console.log(`DTLS PARAMS: ${JSON.stringify(dtlsParameters)}`);
    const transportData = transports.find(transportData => (
      transportData.consumer && transportData.transport.id === serverConsumerTransportId
    ));
    
    if (transportData) {
      await transportData.transport.connect({ dtlsParameters });
    } else {
      console.error('Transport not found for consumer transport ID:', serverConsumerTransportId);
    }
  });

  socket.on('consume', async (
    { rtpCapabilities, remoteProducerId, serverConsumerTransportId }: 
    { rtpCapabilities: any, remoteProducerId: string, serverConsumerTransportId: string }, 
    callback: (data: { params: any }) => void
  ) => {
    try {
      const { roomName } = peers[socket.id];
      const router = rooms[roomName].router;
      const transportData = transports.find(transportData => (
        transportData.consumer && transportData.transport.id === serverConsumerTransportId
      ));
      
      if (!transportData) {
        throw new Error(`Consumer transport not found: ${serverConsumerTransportId}`);
      }
      
      const consumerTransport = transportData.transport;

      // check if the router can consume the specified producer
      if (router.canConsume({
        producerId: remoteProducerId,
        rtpCapabilities
      })) {
        // transport can now consume and return a consumer
        const consumer = await consumerTransport.consume({
          producerId: remoteProducerId,
          rtpCapabilities,
          paused: true,
        });

        consumer.on('transportclose', () => {
          console.log('transport close from consumer');
        });

        consumer.on('producerclose', () => {
          console.log('producer of consumer closed');
          socket.emit('producer-closed', { remoteProducerId });

          consumerTransport.close();
          transports = transports.filter(transportData => transportData.transport.id !== consumerTransport.id);
          consumer.close();
          consumers = consumers.filter(consumerData => consumerData.consumer.id !== consumer.id);
        });

        addConsumer(consumer, roomName);

        // from the consumer extract the following params
        // to send back to the Client
        const params = {
          id: consumer.id,
          producerId: remoteProducerId,
          kind: consumer.kind,
          rtpParameters: consumer.rtpParameters,
          serverConsumerId: consumer.id,
        };

        // send the parameters to the client
        callback({ params });
      } else {
        callback({
          params: {
            error: 'Router cannot consume the producer'
          }
        });
      }
    } catch (error) {
      console.log((error as Error).message);
      callback({
        params: {
          error: error
        }
      });
    }
  });

  socket.on('consumer-resume', async ({ serverConsumerId }: { serverConsumerId: string }) => {
    console.log('consumer resume');
    const consumerData = consumers.find(consumerData => consumerData.consumer.id === serverConsumerId);
    if (consumerData) {
      await consumerData.consumer.resume();
    } else {
      console.error('Consumer not found:', serverConsumerId);
    }
  });
});

const createWebRtcTransport = async (router: Router): Promise<WebRtcTransport> => {
  return new Promise(async (resolve, reject) => {
    try {
      // https://mediasoup.org/documentation/v3/mediasoup/api/#WebRtcTransportOptions
      const webRtcTransport_options = {
        listenIps: [
          {
            ip: '0.0.0.0', // replace with relevant IP address
            announcedIp: '10.0.0.115',
          }
        ],
        enableUdp: true,
        enableTcp: true,
        preferUdp: true,
      };

      // https://mediasoup.org/documentation/v3/mediasoup/api/#router-createWebRtcTransport
      let transport = await router.createWebRtcTransport(webRtcTransport_options);
      console.log(`transport id: ${transport.id}`);

      transport.on('dtlsstatechange', dtlsState => {
        if (dtlsState === 'closed') {
          transport.close();
        }
      });

      transport.on('@close', () => {
        console.log('transport closed');
      });

      resolve(transport);

    } catch (error) {
      reject(error);
    }
  });
};